apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "mo.wall.org"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'x86', 'x86_64', 'armeabi-v7a'
            //, 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        vectorDrawables.useSupportLibrary = true
    }

    // 多渠道/多环境 的不同配置
    flavorDimensions "default"

    productFlavors {
        mainApk {//
            // 每个环境包名不同
            applicationId "mo.wall.org"
            //终端打包命令教程https://www.jianshu.com/p/c5f69437100a
            //gradlew assembleRelease
            //gradlew assembleReleaseTest
            // release模式下，不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")//这是log控制，也会影响好多地方的开关控制
            buildConfigField "String", "bugly_appid", "\"xxxxxx\"" //
        }
        tesApk {//
            // 每个环境包名不同
            applicationId "mo.wall.org.test"
            //终端打包命令教程https://www.jianshu.com/p/c5f69437100a
            //gradlew assembleRelease
            //gradlew assembleReleaseTest
            // release模式下，不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")//这是log控制，也会影响好多地方的开关控制
            buildConfigField "String", "bugly_appid", "\"xxxxxxxx\"" //测试的appid,为了测试升级
        }
    }

    /**
     * 这前用上面multiDexEnabled true时，
     * 突然在5.0以下的手机上跑不起来，
     * 改成下面这种写法就可以了。
     */
    dexOptions {
        jumboMode true
    }

    dataBinding {
        enabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
        }
    }


    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

        pickFirst 'lib/armeabi-v7a/libsecsdk.so'
        pickFirst "lib/armeabi-v7a/libRSSupport.so"


        exclude "lib/armeabi-v7a/libRSSupport.so"
        exclude "lib/arm64-v8a/libRSSupport.so"
        exclude "lib/x86_64/libRSSupport.so"
        exclude "lib/x86/libRSSupport.so"

        exclude "lib/armeabi-v7a/librsjni.so"
        exclude "lib/arm64-v8a/librsjni.so"
        exclude "lib/x86_64/librsjni.so"
        exclude "lib/x86/librsjni.so"

        exclude "lib/x86_64/librsjni_androidx.so"
        exclude "lib/x86/librsjni_androidx.so"
        exclude "lib/armeabi-v7a/librsjni_androidx.so"
        exclude "lib/arm64-v8a/librsjni_androidx.so"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

//kapt {
//    generateStubs = true
//}


dependencies {

    def room_version = "1.1.0"
    def paging_version = "1.0.0"
    def lifecycle_version = "1.1.1"

    //Paging的依赖
//    implementation "android.arch.paging:runtime:$paging_version"
    //Paging对RxJava2的原生支持
//    implementation "android.arch.paging:rxjava2:1.0.0-rc1"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation rootProject.ext.dependencies.core_ktx

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    kapt "com.android.databinding:compiler:3.1.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation(rootProject.ext.dependencies.appCompat) {
        exclude group: 'androidx.fragment'
        force true
    }
    implementation(rootProject.ext.dependencies.loader) {
        force true
    }
    implementation(rootProject.ext.dependencies.fragment) {
        exclude group: 'androidx.loader'
        force true
    }
    implementation(rootProject.ext.dependencies.exifinterface) {
        force true
    }
    implementation(rootProject.ext.dependencies.design) {
        exclude group: 'androidx.loader'
        exclude group: 'androidx.legacy'
        force true
    }
    implementation(rootProject.ext.dependencies.legacy) {
        exclude group: 'androidx.loader'
        force true
    }
    implementation(rootProject.ext.dependencies.cardview) {
        force true
    }
    implementation(rootProject.ext.dependencies.recyclerview) {
        force true
    }
    implementation(rootProject.ext.dependencies.annotation) {
        force true
    }
    implementation(rootProject.ext.dependencies.constraintlayout) {
        force true
    }
    implementation(rootProject.ext.dependencies.flexbox) {
        force true
    }
    implementation(rootProject.ext.dependencies.multidex) {
        force true
    }
    implementation('com.squareup.okhttp3:okhttp:3.10.0') {
        force true
    }

//    implementation 'com.android.support:multidex:1.0.2'
//    implementation 'com.android.support:multidex-instrumentation:1.0.2'


    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(':library_common')
    implementation project(':library_ui')
    implementation project(':library_okhttp')

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
//    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
//    // Optional, if you use support library fragments:
//    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

//    debugImplementation 'com.didichuxing.doraemonkit:doraemonkit:2.0.1'
//    debugImplementation 'com.didichuxing.doraemonkit:doraemonkit-leakcanary:2.0.1'

    // 原本：`RxJava 1.0` 依赖
    //implementation 'io.reactivex:rxandroid:1.2.0'
    //implementation 'io.reactivex:rxjava:1.1.5'

    // 更改：`RxJava 2.0` 依赖
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.11'


    //高度封装rv  https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    //implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.45-androidx'


//    implementation 'com.yanzhenjie:permission:2.0.3'
    
    /**
     * https://github.com/permissions-dispatcher/PermissionsDispatcher
     */
    def permissionsdispatcher_version = "4.8.0"
    implementation "org.permissionsdispatcher:permissionsdispatcher:$permissionsdispatcher_version"
    annotationProcessor "org.permissionsdispatcher:permissionsdispatcher-processor:$permissionsdispatcher_version"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:$permissionsdispatcher_version"

    /**
     * orc识别图片文字
     */
    implementation 'com.rmtheis:tess-two:9.1.0'

}

/**
 *
 || requested.group == 'androidx.viewpager'
 || requested.group == 'androidx.cursoradapter'
 || requested.group == 'androidx.drawerlayout'
 */
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.contains("multidex")) {
                println("support----" + requested.name)
                details.useVersion rootProject.ext.android.compat_version
            }
        } else if (requested.group == 'androidx.appcompat'
                || requested.group == 'androidx.annotation'
                || requested.group == 'androidx.recyclerview'
                || requested.group == 'androidx.fragment'
                || requested.group == 'androidx.collection'
                || requested.group == 'androidx.exifinterface'
                || requested.group == 'androidx.loader'
                || requested.group == 'androidx.core'
                || requested.group == 'androidx.vectordrawable'
                || requested.group == 'androidx.collection'
                || requested.group == 'androidx.versionedparcelable'
                || requested.group == 'androidx.vectordrawable'
        ) {
            println("androidx----" + requested.name)
            details.useVersion rootProject.ext.android.compatx_version
        } else if (requested.group == 'androidx.lifecycle') {
            println("androidx-lifecycle-arch--" + requested.name)
            details.useVersion rootProject.ext.android.compat_lifecycle_version
        } else if (requested.group == 'androidx.arch.core') {
            println("androidx-lifecycle-arch--" + requested.name)
            details.useVersion rootProject.ext.android.compat_arch_common_version
        }
    }
}
